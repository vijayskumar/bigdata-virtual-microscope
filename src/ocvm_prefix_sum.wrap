#!/usr/bin/env python
import os, os.path, sys, re, commands, pickle, tempfile, getopt
import socket, string, random, time, traceback, shutil

def usage():
    s = 'usage: ' + os.path.basename(sys.argv[0]) + ' <inputs_serialized> <outputs_serialized>\n'
    sys.stderr.write(s)
    sys.exit(1)

if ((len(sys.argv)-1) != 2):
    usage()

ins = {}
f = open(sys.argv[1], "r")
while 1:
    k = f.readline().strip()
    if not k:
        break
    valbytes = int(f.readline())
    val = f.read(valbytes)
    ins[k] = val
    c = f.read(1) # eat \n
f.close()

cmd = 'ocvm_prefix_sum %s %s %s %s %s %s 256m %s' % \
    (ins['imagein'],
     ins['threshold_b'],
     ins['threshold_g'],
     ins['threshold_r'],
     ins['reduction_factor'], ins['reduction_factor'],
     ins['imageout'])
print '+%s' % (cmd)
before = time.time()
rc = os.system(cmd) # + " >/tmp/dc2.out 2>&1")
after = time.time()
elapsed = after - before
if rc != 0:
    sys.stderr.write("ERROR: calling %s\n"%(cmd))
f = open(sys.argv[2], "w")
f.write('imagein\n%d\n%s\n' % (len(ins['imagein']), ins['imagein']))
f.write('imageout\n%d\n%s\n' % (len(ins['imageout']), ins['imageout']))
if rc==0:
    f.write('status\n2\nOK\n')
else:
    f.write('status\n%d\n%d\n' % (len(`rc`), rc))
f.write('elapsed\n%d\n%f\n' % (len(`elapsed`), elapsed))
f.close()
